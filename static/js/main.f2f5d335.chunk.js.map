{"version":3,"sources":["assets/hero.png","components/Minter.js","index.js"],"names":["initialInfoState","connected","status","account","web3","contract","address","contractJSON","initialMintState","loading","name","amount","supply","cost","Minter","useState","info","setInfo","mintInfo","setMintInfo","console","log","init","_request","_contractJSON","a","window","ethereum","isMetaMask","request","method","accounts","chain_id","Web3","prevState","eth","Contract","abi","chain","message","getSupply","params","to","from","data","methods","totalSupply","encodeABI","result","utils","hexToNumberString","getCost","mint","value","String","toHex","Number","updateAmount","newAmount","connectToContract","useEffect","on","location","reload","className","alt","src","Hero","total_supply","style","display","justifyContent","alignItems","disabled","onClick","width","color","textAlign","fromWei","chain_symbol","backgroundColor","substring","position","bottom","left","fontFamily","target","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f2f5d335.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/hero.3d80e88b.png\";","import { useEffect, useState } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport contract from \"../contracts/contract.json\";\r\nimport Hero from \"../assets/hero.png\";\r\n\r\nconst initialInfoState = {\r\n  connected: false,\r\n  status: null,\r\n  account: null,\r\n  web3: null,\r\n  contract: null,\r\n  address: null,\r\n  contractJSON: null,\r\n};\r\n\r\nconst initialMintState = {\r\n  loading: false,\r\n  status: `Get your ${contract.name}`,\r\n  amount: 1,\r\n  supply: \"0\",\r\n  cost: \"0\",\r\n};\r\n\r\nfunction Minter() {\r\n  const [info, setInfo] = useState(initialInfoState);\r\n  const [mintInfo, setMintInfo] = useState(initialMintState);\r\n\r\n  console.log(info);\r\n\r\n  const init = async (_request, _contractJSON) => {\r\n    if (window.ethereum.isMetaMask) {\r\n      try {\r\n        const accounts = await window.ethereum.request({\r\n          method: _request,\r\n        });\r\n        const networkId = await window.ethereum.request({\r\n          method: \"net_version\",\r\n        });\r\n        if (networkId == _contractJSON.chain_id) {\r\n          let web3 = new Web3(window.ethereum);\r\n          setInfo((prevState) => ({\r\n            ...prevState,\r\n            connected: true,\r\n            status: null,\r\n            account: accounts[0],\r\n            web3: web3,\r\n            contract: new web3.eth.Contract(\r\n              _contractJSON.abi,\r\n              _contractJSON.address\r\n            ),\r\n            contractJSON: _contractJSON,\r\n          }));\r\n        } else {\r\n          setInfo(() => ({\r\n            ...initialInfoState,\r\n            status: `Change network to ${_contractJSON.chain}.`,\r\n          }));\r\n        }\r\n      } catch (err) {\r\n        console.log(err.message);\r\n        setInfo(() => ({\r\n          ...initialInfoState,\r\n        }));\r\n      }\r\n    } else {\r\n      setInfo(() => ({\r\n        ...initialInfoState,\r\n        status: \"Please install metamask.\",\r\n      }));\r\n    }\r\n  };\r\n\r\n  const initListeners = () => {\r\n    if (window.ethereum) {\r\n      window.ethereum.on(\"accountsChanged\", () => {\r\n        window.location.reload();\r\n      });\r\n      window.ethereum.on(\"chainChanged\", () => {\r\n        window.location.reload();\r\n      });\r\n    }\r\n  };\r\n\r\n  const getSupply = async () => {\r\n    const params = {\r\n      to: info.contractJSON.address,\r\n      from: info.account,\r\n      data: info.contract.methods.totalSupply().encodeABI(),\r\n    };\r\n    try {\r\n      const result = await window.ethereum.request({\r\n        method: \"eth_call\",\r\n        params: [params],\r\n      });\r\n      console.log(info.web3.utils.hexToNumberString(result));\r\n      setMintInfo((prevState) => ({\r\n        ...prevState,\r\n        supply: info.web3.utils.hexToNumberString(result),\r\n      }));\r\n    } catch (err) {\r\n      setMintInfo((prevState) => ({\r\n        ...prevState,\r\n        supply: 0,\r\n      }));\r\n    }\r\n  };\r\n\r\n  const getCost = async () => {\r\n    const params = {\r\n      to: info.contractJSON.address,\r\n      from: info.account,\r\n      data: info.contract.methods.cost().encodeABI(),\r\n    };\r\n    try {\r\n      const result = await window.ethereum.request({\r\n        method: \"eth_call\",\r\n        params: [params],\r\n      });\r\n      console.log(info.web3.utils.hexToNumberString(result));\r\n      setMintInfo((prevState) => ({\r\n        ...prevState,\r\n        cost: info.web3.utils.hexToNumberString(result),\r\n      }));\r\n    } catch (err) {\r\n      setMintInfo((prevState) => ({\r\n        ...prevState,\r\n        cost: \"0\",\r\n      }));\r\n    }\r\n  };\r\n\r\n  const mint = async () => {\r\n    const params = {\r\n      to: info.contractJSON.address,\r\n      from: info.account,\r\n      value: String(\r\n        info.web3.utils.toHex(Number(mintInfo.cost) * mintInfo.amount)\r\n      ),\r\n      data: info.contract.methods\r\n        .mint(mintInfo.amount)\r\n        .encodeABI(),\r\n    };\r\n    try {\r\n      setMintInfo((prevState) => ({\r\n        ...prevState,\r\n        loading: true,\r\n        status: `Minting ${mintInfo.amount} Kizutaro`,\r\n      }));\r\n      const txHash = await window.ethereum.request({\r\n        method: \"eth_sendTransaction\",\r\n        params: [params],\r\n      });\r\n      setMintInfo((prevState) => ({\r\n        ...prevState,\r\n        loading: false,\r\n        status:\r\n          \"Nice! Your NFT will show up on Opensea, once the transaction is successful.\",\r\n      }));\r\n      getSupply();\r\n    } catch (err) {\r\n      setMintInfo((prevState) => ({\r\n        ...prevState,\r\n        loading: false,\r\n        status: err.message,\r\n      }));\r\n    }\r\n  };\r\n\r\n  const updateAmount = (newAmount) => {\r\n    if (newAmount <= 20 && newAmount >= 1) {\r\n      setMintInfo((prevState) => ({\r\n        ...prevState,\r\n        amount: newAmount,\r\n      }));\r\n    }\r\n  };\r\n\r\n  const connectToContract = (_contractJSON) => {\r\n    init(\"eth_requestAccounts\", _contractJSON);\r\n  };\r\n\r\n  useEffect(() => {\r\n    connectToContract(contract);\r\n    initListeners();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (info.connected) {\r\n      getSupply();\r\n      getCost();\r\n    }\r\n  }, [info.connected]);\r\n\r\n  return (\r\n    <div className=\"page\">\r\n      <div className=\"card\">\r\n        <div className=\"card_header colorGradient\">\r\n          <img className=\"card_header_image ns\" alt={\"banner\"} src={Hero} />\r\n        </div>\r\n        {mintInfo.supply < contract.total_supply ? (\r\n          <div className=\"card_body\">\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <button\r\n                disabled={!info.connected || mintInfo.cost == \"0\"}\r\n                className=\"small_button\"\r\n                onClick={() => updateAmount(mintInfo.amount - 1)}\r\n              >\r\n                -\r\n              </button>\r\n              <div style={{ width: 10 }}></div>\r\n              <button\r\n                disabled={!info.connected || mintInfo.cost == \"0\"}\r\n                className=\"button\"\r\n                onClick={() => mint()}\r\n              >\r\n                Mint {mintInfo.amount}\r\n                \r\n              </button>\r\n              <div style={{ width: 10 }}></div>\r\n              <button\r\n                disabled={!info.connected || mintInfo.cost == \"0\"}\r\n                className=\"small_button\"\r\n                onClick={() => updateAmount(mintInfo.amount + 1)}\r\n              >\r\n                +\r\n              </button>\r\n            </div>\r\n            {info.connected ? (\r\n              <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n                <p style={{ color: \"var(--statusText)\", textAlign: \"center\" }}>\r\n                  {info.web3?.utils.fromWei(mintInfo.cost, \"ether\") *\r\n                    mintInfo.amount}{\" \"}\r\n                  {contract.chain_symbol}\r\n                </p>\r\n                <div style={{ width: 20 }}></div>\r\n                <p style={{ color: \"var(--statusText)\", textAlign: \"center\" }}>\r\n                  |\r\n                </p>\r\n                <div style={{ width: 20 }}></div>\r\n                <p style={{ color: \"var(--statusText)\", textAlign: \"center\" }}>\r\n                  {mintInfo.supply}/{contract.total_supply}\r\n                </p>\r\n              </div>\r\n            ) : null}\r\n            {mintInfo.status ? (\r\n              <p className=\"statusText\">{mintInfo.status}</p>\r\n            ) : null}\r\n            {info.status ? (\r\n              <p className=\"statusText\" style={{ color: \"var(--error)\" }}>\r\n                {info.status}\r\n              </p>\r\n            ) : null}\r\n          </div>\r\n        ) : (\r\n          <div className=\"card_body\">\r\n            <p style={{ color: \"var(--statusText)\", textAlign: \"center\" }}>\r\n              {mintInfo.supply}/{contract.total_supply}\r\n            </p>\r\n            <p className=\"statusText\">\r\n              We've sold out! .You can still buy and trade the {contract.name}{\" \"}\r\n              on marketplaces such as Opensea.\r\n            </p>\r\n          </div>\r\n        )}\r\n        <div className=\"card_footer colorGradient\">\r\n          <button\r\n            className=\"button\"\r\n            style={{\r\n              backgroundColor: info.connected\r\n                ? \"var(--success)\"\r\n                : \"var(--warning)\",\r\n            }}\r\n            onClick={() => connectToContract(contract)}\r\n          >\r\n            {info.account ? \"Connected\" : \"Connect Wallet\"}\r\n          </button>\r\n          {info.connected ? (\r\n            <span className=\"accountText\">\r\n              {String(info.account).substring(0, 6) +\r\n                \"...\" +\r\n                String(info.account).substring(38)}\r\n            </span>\r\n          ) : null}\r\n        </div>\r\n        <a\r\n          style={{\r\n            position: \"absolute\",\r\n            bottom: 65,\r\n            left: 5,\r\n            fontFamily: \"sans-serif\",\r\n          }}\r\n          target=\"_blank\"\r\n          href=\"https://polygonscan.com/address/0x3b8Ac9b784554a48d007Cd3E3300B01cE60A9C3F\"\r\n        >\r\n          Smart Contract\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Minter;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Minter from \"./components/Minter\";\r\nimport \"./styles/styles.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Minter />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}